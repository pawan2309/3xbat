import { Router, Request, Response } from 'express';
import { betPlacementService } from '../../services/betting/BetPlacementService';
import { Bet, BetPlacementResult } from '../../types/betting.types';
import logger from '../../monitoring/logging/logger';

const router = Router();

// Place a bet
router.post('/place', async (req: Request, res: Response) => {
  try {
    const { userId, marketName, odds, stake } = req.body;

    // Validate required fields
    if (!userId || !marketName || !odds || !stake) {
      return res.status(400).json({
        success: false,
        message: 'Missing required fields: userId, marketName, odds, stake'
      });
    }

    // Create bet object
    const bet: Bet = {
      id: '', // Will be generated by the service
      userId,
      marketName,
      odds: parseFloat(odds),
      stake: parseFloat(stake)
    };

    // Place the bet
    const result: BetPlacementResult = await betPlacementService.placeBet(bet);

    if (result.success) {
      res.status(201).json({
        success: true,
        data: {
          betId: result.betId,
          betType: result.betType,
          message: result.message
        }
      });
    } else {
      res.status(400).json({
        success: false,
        message: result.message,
        error: result.error
      });
    }

  } catch (error) {
    logger.error('Error in bet placement API:', error);
    res.status(500).json({
      success: false,
      message: 'Internal server error',
      error: error instanceof Error ? error.message : 'Unknown error'
    });
  }
});

// Get bet statistics for a user
router.get('/stats/:userId', async (req: Request, res: Response) => {
  try {
    const { userId } = req.params;
    const { type } = req.query;

    if (!userId) {
      return res.status(400).json({
        success: false,
        message: 'User ID is required'
      });
    }

    const betType = type as 'match' | 'session' | undefined;
    const stats = await betPlacementService.getBetStatistics(userId, betType);

    res.json({
      success: true,
      data: stats
    });

  } catch (error) {
    logger.error('Error getting bet statistics:', error);
    res.status(500).json({
      success: false,
      message: 'Internal server error',
      error: error instanceof Error ? error.message : 'Unknown error'
    });
  }
});

// Get available bet types
router.get('/types', (req: Request, res: Response) => {
  try {
    const availableTypes = betPlacementService.getAvailableBetTypes();
    
    res.json({
      success: true,
      data: {
        availableTypes,
        count: availableTypes.length
      }
    });
  } catch (error) {
    logger.error('Error getting bet types:', error);
    res.status(500).json({
      success: false,
      message: 'Internal server error',
      error: error instanceof Error ? error.message : 'Unknown error'
    });
  }
});

// Test bet categorization
router.post('/categorize', (req: Request, res: Response) => {
  try {
    const { marketName } = req.body;

    if (!marketName) {
      return res.status(400).json({
        success: false,
        message: 'Market name is required'
      });
    }

    // Create a test bet object
    const testBet: Bet = {
      id: 'test',
      userId: 'test',
      marketName,
      odds: 1.5,
      stake: 100
    };

    // Import the categorization service
    const { betCategorizationService } = require('../../services/betting/BetCategorizationService');
    const betType = betCategorizationService.categorizeBet(testBet);

    res.json({
      success: true,
      data: {
        marketName,
        betType,
        message: `Market "${marketName}" categorized as ${betType} bet`
      }
    });

  } catch (error) {
    logger.error('Error in bet categorization:', error);
    res.status(500).json({
      success: false,
      message: 'Internal server error',
      error: error instanceof Error ? error.message : 'Unknown error'
    });
  }
});

export default router;
